import { FHIRDefinitions } from './FHIRDefinitions';
/**
 * Loads a dependency from user FHIR cache or from online
 * @param {string} packageName - The name of the package to load
 * @param {string} version - The version of the package to load
 * @param {FHIRDefinitions} FHIRDefs - The FHIRDefinitions to load the dependencies into
 * @param {string} cachePath - The path to load the package into
 * @returns {Promise<FHIRDefinitions>} the loaded FHIRDefs
 * @throws {PackageLoadError} when the desired package can't be loaded
 */
export declare function loadDependency(packageName: string, version: string, FHIRDefs: FHIRDefinitions, cachePath?: string): Promise<FHIRDefinitions>;
/**
 * This function takes a package which contains contents at the same level as the "package" folder, and nests
 * all that content within the "package" folder.
 *
 * A package should have the format described here https://confluence.hl7.org/pages/viewpage.action?pageId=35718629#NPMPackageSpecification-Format
 * in which all contents are within the "package" folder. Some packages (ex US Core 3.1.0) have an incorrect format in which folders
 * are not sub-folders of "package", but are instead at the same level. The IG Publisher fixes these packages as described
 * https://chat.fhir.org/#narrow/stream/215610-shorthand/topic/dev.20dependencies, so SUSHI should as well.
 *
 * @param {string} packageDirectory - The directory containing the package
 */
export declare function cleanCachedPackage(packageDirectory: string): void;
/**
 * Loads custom resources defined in ig-data into FHIRDefs
 * @param {string} resourceDir - The path to the directory containing the resource subdirs
 * @param {FHIRDefinitions} defs - The FHIRDefinitions object to load definitions into
 */
export declare function loadCustomResources(resourceDir: string, defs: FHIRDefinitions): void;
/**
 * Loads a set of JSON files at targetPath into FHIRDefs
 * @param {string} targetPath - The path to the directory containing the JSON definitions
 * @param {string} targetPackage - The name of the package we are trying to load
 * @param {FHIRDefinitions} FHIRDefs - The FHIRDefinitions object to load defs into
 * @returns {string} the name of the loaded package if successful
 */
export declare function loadFromPath(targetPath: string, targetPackage: string, FHIRDefs: FHIRDefinitions): string;
