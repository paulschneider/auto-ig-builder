import { FSHTank } from '../import/FSHTank';
import { InstanceDefinition } from '../fhirtypes';
import { Instance } from '../fshtypes';
import { Fishable, Metadata } from '../utils';
import { Package } from '.';
export declare class InstanceExporter implements Fishable {
    private readonly tank;
    private readonly pkg;
    private readonly fisher;
    constructor(tank: FSHTank, pkg: Package, fisher: Fishable);
    private setAssignedValues;
    /**
     * Check that all required elements are present on an InstanceDefinition or
     * a sub-part of an InstanceDefinition for all children of an element.
     * An element is required if it has minimum cardinality greater than 1.
     * @param {{[key: string]: any}} instance - The InstanceDefinition or subsection of an InstanceDefinition we are validating
     * @param {ElementDefinition} element - The element we are trying to validate all children of
     * @param {Instance} fshDefinition - The FSH definition that we built the original InstanceDefinition from
     */
    private validateRequiredChildElements;
    /**
     * Check that all required elements are present on an instance
     * @param {InstanceDefinition} instanceDef - The InstanceDefinition we are validating
     * @param {ElementDefinition[]} elements - The elements of the StructDef that instanceDef is an instance of
     * @param {Instance} fshDefinition - The FSH definition that we built instanceDef from
     */
    private validateRequiredElements;
    fishForFHIR(item: string): InstanceDefinition;
    fishForMetadata(item: string): Metadata;
    exportInstance(fshDefinition: Instance): InstanceDefinition;
    /**
     * Exports Instances
     * @param {FSHTank} tank - The FSH tank we are exporting
     * @returns {Package}
     */
    export(): Package;
}
