import { Meta } from './specialTypes';
import { Extension } from '../fshtypes';
import { Narrative, Resource, Identifier, CodeableConcept, Coding } from './dataTypes';
import { ContactDetail, UsageContext } from './metaDataTypes';
import { HasName, HasId } from './common';
/**
 * Class representing a FHIR R4 CodeSystem
 * @see {@link https://www.hl7.org/fhir/codesystem.html}
 */
export declare class CodeSystem {
    readonly resourceType = "CodeSystem";
    meta?: Meta;
    implicitRules?: string;
    language?: string;
    text?: Narrative;
    contained?: Resource[];
    extension?: Extension[];
    modifierExtension?: Extension[];
    url?: string;
    identifier?: Identifier[];
    version?: string;
    title?: string;
    status: 'draft' | 'active' | 'retired' | 'unknown';
    experimental?: boolean;
    date?: string;
    publisher?: string;
    contact?: ContactDetail[];
    description?: string;
    useContext?: UsageContext[];
    jurisdiction?: CodeableConcept[];
    purpose?: string;
    copyright?: string;
    caseSensitive?: boolean;
    valueSet?: string;
    hierarchyMeaning?: string;
    compositional?: boolean;
    versionNeeded?: boolean;
    content: 'not-present' | 'example' | 'fragment' | 'complete' | 'supplement';
    supplements?: string;
    count?: number;
    filter?: CodeSystemFilter[];
    property?: CodeSystemProperty[];
    concept?: CodeSystemConcept[];
    /**
     * Get the file name for serializing to disk.
     * @returns {string} the filename
     */
    getFileName(): string;
    /**
     * Exports the CodeSystem to a properly formatted FHIR JSON representation.
     * @returns {any} the FHIR JSON representation of the CodeSystem
     */
    toJSON(): any;
}
export interface CodeSystem extends HasId, HasName {
}
export declare type CodeSystemFilter = {
    code: string;
    description?: string;
    operator: string[];
    value: string;
};
export declare type CodeSystemProperty = {
    code: string;
    uri?: string;
    description?: string;
    type: string;
};
export declare type CodeSystemConcept = {
    code: string;
    display?: string;
    definition?: string;
    designation?: CodeSystemConceptDesignation[];
    property?: CodeSystemConceptProperty[];
    concept?: CodeSystemConcept[];
};
export declare type CodeSystemConceptDesignation = {
    language?: string;
    use?: Coding;
    value: string;
};
export declare type CodeSystemConceptProperty = {
    code: string;
    valueCode?: string;
    valueCoding?: Coding;
    valueString?: string;
    valueInteger?: number;
    valueBoolean?: boolean;
    valueDateTime?: string;
    valueDecimal?: number;
};
