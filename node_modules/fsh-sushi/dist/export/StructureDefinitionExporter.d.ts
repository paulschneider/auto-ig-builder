import { StructureDefinition } from '../fhirtypes';
import { Profile, Extension } from '../fshtypes';
import { FSHTank } from '../import';
import { CaretValueRule } from '../fshtypes/rules';
import { Type, Fishable, Metadata, MasterFisher } from '../utils';
import { Package } from './Package';
/**
 * The StructureDefinitionExporter is the class for exporting Profiles and Extensions.
 * The operations and structure of both exporters are very similar, so they currently share an exporter.
 */
export declare class StructureDefinitionExporter implements Fishable {
    private readonly tank;
    private readonly pkg;
    private readonly fisher;
    deferredRules: Map<StructureDefinition, CaretValueRule[]>;
    constructor(tank: FSHTank, pkg: Package, fisher: MasterFisher);
    /**
     * Sets the metadata for the StructureDefinition.  This includes clearing metadata that was copied from the parent
     * that may not be relevant to the child StructureDefinition.  Overall approach was discussed on Zulip.  This
     * function represents implementation of that approach plus setting extra metadata provided by FSH.
     * This essentially aligns closely with the approach that Forge uses (ensuring some consistency across tools).
     * @see {@link https://chat.fhir.org/#narrow/stream/179252-IG-creation/topic/Bad.20links.20on.20Detailed.20Description.20tab/near/186766845}
     * @param {StructureDefinition} structDef - The StructureDefinition to set metadata on
     * @param {Profile | Extension} fshDefinition - The Profile or Extension we are exporting
     */
    private setMetadata;
    /**
     * Sets the rules for the StructureDefinition
     * @param {StructureDefinition} structDef - The StructureDefinition to set rules on
     * @param {Profile | Extension} fshDefinition - The Profile or Extension we are exporting
     */
    private setRules;
    applyDeferredRules(): void;
    /**
     * Handles a ContainsRule that is on an extension path, appropriately exporting it as a reference to a standalone
     * extension or an inline extension.
     * @param {Profile|Extension} fshDefinition - the FSH Definition the rule is on
     * @param {ContainsRule} rule - the ContainsRule that is on an extension element
     * @param {StructureDefinition} structDef - the StructDef of the resulting profile or element
     * @param {ElementDefinition} element - the element to apply the rule to
     */
    private handleExtensionContainsRule;
    /**
     * Does any necessary preprocessing of profiles and extensions.
     * @param {Extension} fshDefinition - The extension to do preprocessing on. It is updated directly based on processing.
     */
    private preprocessStructureDefinition;
    fishForFHIR(item: string, ...types: Type[]): any;
    fishForMetadata(item: string, ...types: Type[]): Metadata;
    /**
     * Exports Profile or Extension to StructureDefinition
     * @param {Profile | Extension} fshDefinition - The Profile or Extension we are exporting
     * @returns {StructureDefinition}
     * @throws {ParentDeclaredAsProfileNameError} when the Profile declares itself as the parent
     * @throws {ParentNotDefinedError} when the Profile or Extension's parent is not found
     */
    exportStructDef(fshDefinition: Profile | Extension): StructureDefinition;
    /**
     * Exports Profiles and Extensions to StructureDefinitions
     * @returns {Package}
     */
    export(): Package;
}
