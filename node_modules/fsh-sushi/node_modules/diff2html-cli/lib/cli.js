"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.postToDiffy = exports.preview = exports.getOutput = exports.getInput = void 0;
var fs_1 = __importDefault(require("fs"));
var os_1 = __importDefault(require("os"));
var path_1 = __importDefault(require("path"));
var clipboardy = __importStar(require("clipboardy"));
var open = require("open");
var diff2html_1 = require("diff2html");
var http = __importStar(require("./http-utils"));
var log = __importStar(require("./logger"));
var utils = __importStar(require("./utils"));
function runGitDiff(gitArgsArr, ignore) {
    var baseArgs = gitArgsArr.length > 0 ? gitArgsArr.map(function (arg) { return "\"" + arg + "\""; }) : ['-M', '-C', 'HEAD'];
    var colorArgs = gitArgsArr.indexOf('--no-color') < 0 ? ['--no-color'] : [];
    var ignoreArgs = ignore.map(function (file) { return "\":(exclude)" + file + "\""; });
    var diffCommand = "git diff " + baseArgs.join(' ') + " " + colorArgs.join(' ') + " " + ignoreArgs.join(' ');
    return utils.execute(diffCommand);
}
function prepareHTML(diffHTMLContent, config) {
    var template = utils.readFile(config.htmlWrapperTemplate);
    var diff2htmlPath = path_1.default.join(path_1.default.dirname(require.resolve('diff2html')), '..');
    var cssFilePath = path_1.default.resolve(diff2htmlPath, 'bundles', 'css', 'diff2html.min.css');
    var cssContent = utils.readFile(cssFilePath);
    var jsUiFilePath = path_1.default.resolve(diff2htmlPath, 'bundles', 'js', 'diff2html-ui-slim.min.js');
    var jsUiContent = utils.readFile(jsUiFilePath);
    return [
        { searchValue: '<!--diff2html-css-->', replaceValue: "<style>\n" + cssContent + "\n</style>" },
        { searchValue: '<!--diff2html-js-ui-->', replaceValue: "<script>\n" + jsUiContent + "\n</script>" },
        {
            searchValue: '//diff2html-fileListToggle',
            replaceValue: "diff2htmlUi.fileListToggle(" + config.showFilesOpen + ");",
        },
        {
            searchValue: '//diff2html-synchronisedScroll',
            replaceValue: config.synchronisedScroll ? "diff2htmlUi.synchronisedScroll();" : '',
        },
        {
            searchValue: '//diff2html-highlightCode',
            replaceValue: config.highlightCode ? "diff2htmlUi.highlightCode();" : '',
        },
        { searchValue: '<!--diff2html-diff-->', replaceValue: diffHTMLContent },
    ].reduce(function (previousValue, replacement) {
        return utils.replaceExactly(previousValue, replacement.searchValue, replacement.replaceValue);
    }, template);
}
function getInput(inputType, inputArgs, ignore) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (inputType) {
                case 'file':
                    return [2, utils.readFile(inputArgs[0])];
                case 'stdin':
                    return [2, utils.readStdin()];
                case 'command':
                    return [2, runGitDiff(inputArgs, ignore)];
            }
            return [2];
        });
    });
}
exports.getInput = getInput;
function getOutput(options, config, input) {
    if (config.htmlWrapperTemplate && !fs_1.default.existsSync(config.htmlWrapperTemplate)) {
        process.exitCode = 4;
        throw new Error("Template ('" + config.htmlWrapperTemplate + "') not found!");
    }
    var diffJson = diff2html_1.parse(input, options);
    switch (config.formatType) {
        case 'html': {
            var htmlContent = diff2html_1.html(diffJson, __assign({}, options));
            return prepareHTML(htmlContent, config);
        }
        case 'json': {
            return JSON.stringify(diffJson);
        }
    }
}
exports.getOutput = getOutput;
function preview(content, format) {
    var filename = "diff." + format;
    var filePath = path_1.default.resolve(os_1.default.tmpdir(), filename);
    utils.writeFile(filePath, content);
    open(filePath, { wait: false });
}
exports.preview = preview;
function isCreateDiffResponse(obj) {
    return obj.id !== undefined;
}
function isApiError(obj) {
    return obj.error !== undefined;
}
function postToDiffy(diff, diffyOutput) {
    return __awaiter(this, void 0, void 0, function () {
        var response, url;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, http.put('https://diffy.org/api/diff/', { diff: diff })];
                case 1:
                    response = _a.sent();
                    if (!isCreateDiffResponse(response)) {
                        if (isApiError(response)) {
                            throw new Error(response.error);
                        }
                        else {
                            throw new Error("Could not find 'id' of created diff in the response json.\nBody:\n\n" + JSON.stringify(response, null, 2));
                        }
                    }
                    url = "https://diffy.org/diff/" + response.id;
                    log.print('Link powered by https://diffy.org');
                    log.print(url);
                    if (diffyOutput === 'browser') {
                        open(url);
                    }
                    else if (diffyOutput === 'pbcopy') {
                        clipboardy.writeSync(url);
                    }
                    return [2, url];
            }
        });
    });
}
exports.postToDiffy = postToDiffy;
//# sourceMappingURL=cli.js.map