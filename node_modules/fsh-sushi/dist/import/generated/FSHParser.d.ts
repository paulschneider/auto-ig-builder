declare function FSHParser(input: any): any;
declare class FSHParser {
    constructor(input: any);
    _interp: any;
    ruleNames: string[];
    literalNames: string[];
    symbolicNames: string[];
    get atn(): any;
    doc(): DocContext;
    state: number;
    entity(): EntityContext;
    alias(): AliasContext;
    profile(): ProfileContext;
    extension(): ExtensionContext;
    sdMetadata(): SdMetadataContext;
    sdRule(): SdRuleContext;
    instance(): InstanceContext;
    instanceMetadata(): InstanceMetadataContext;
    instanceRule(): InstanceRuleContext;
    invariant(): InvariantContext;
    invariantMetadata(): InvariantMetadataContext;
    valueSet(): ValueSetContext;
    vsMetadata(): VsMetadataContext;
    vsRule(): VsRuleContext;
    codeSystem(): CodeSystemContext;
    csMetadata(): CsMetadataContext;
    csRule(): CsRuleContext;
    ruleSet(): RuleSetContext;
    ruleSetRule(): RuleSetRuleContext;
    paramRuleSet(): ParamRuleSetContext;
    paramRuleSetContent(): ParamRuleSetContentContext;
    mapping(): MappingContext;
    mappingMetadata(): MappingMetadataContext;
    mappingEntityRule(): MappingEntityRuleContext;
    parent(): ParentContext;
    id(): IdContext;
    title(): TitleContext;
    description(): DescriptionContext;
    expression(): ExpressionContext;
    xpath(): XpathContext;
    severity(): SeverityContext;
    instanceOf(): InstanceOfContext;
    usage(): UsageContext;
    mixins(): MixinsContext;
    source(): SourceContext;
    target(): TargetContext;
    cardRule(): CardRuleContext;
    flagRule(): FlagRuleContext;
    valueSetRule(): ValueSetRuleContext;
    fixedValueRule(): FixedValueRuleContext;
    containsRule(): ContainsRuleContext;
    onlyRule(): OnlyRuleContext;
    obeysRule(): ObeysRuleContext;
    caretValueRule(): CaretValueRuleContext;
    mappingRule(): MappingRuleContext;
    insertRule(): InsertRuleContext;
    vsComponent(): VsComponentContext;
    vsConceptComponent(): VsConceptComponentContext;
    vsFilterComponent(): VsFilterComponentContext;
    vsComponentFrom(): VsComponentFromContext;
    vsFromSystem(): VsFromSystemContext;
    vsFromValueset(): VsFromValuesetContext;
    vsFilterList(): VsFilterListContext;
    vsFilterDefinition(): VsFilterDefinitionContext;
    vsFilterOperator(): VsFilterOperatorContext;
    vsFilterValue(): VsFilterValueContext;
    path(): PathContext;
    paths(): PathsContext;
    caretPath(): CaretPathContext;
    flag(): FlagContext;
    strength(): StrengthContext;
    value(): ValueContext;
    item(): ItemContext;
    code(): CodeContext;
    concept(): ConceptContext;
    quantity(): QuantityContext;
    ratio(): RatioContext;
    reference(): ReferenceContext;
    canonical(): CanonicalContext;
    ratioPart(): RatioPartContext;
    bool(): BoolContext;
    targetType(): TargetTypeContext;
}
declare namespace FSHParser {
    export const EOF: number;
    export const KW_ALIAS: number;
    export const KW_PROFILE: number;
    export const KW_EXTENSION: number;
    export const KW_INSTANCE: number;
    export const KW_INSTANCEOF: number;
    export const KW_INVARIANT: number;
    export const KW_VALUESET: number;
    export const KW_CODESYSTEM: number;
    export const KW_RULESET: number;
    export const KW_MAPPING: number;
    export const KW_MIXINS: number;
    export const KW_PARENT: number;
    export const KW_ID: number;
    export const KW_TITLE: number;
    export const KW_DESCRIPTION: number;
    export const KW_EXPRESSION: number;
    export const KW_XPATH: number;
    export const KW_SEVERITY: number;
    export const KW_USAGE: number;
    export const KW_SOURCE: number;
    export const KW_TARGET: number;
    export const KW_MOD: number;
    export const KW_MS: number;
    export const KW_SU: number;
    export const KW_TU: number;
    export const KW_NORMATIVE: number;
    export const KW_DRAFT: number;
    export const KW_FROM: number;
    export const KW_EXAMPLE: number;
    export const KW_PREFERRED: number;
    export const KW_EXTENSIBLE: number;
    export const KW_REQUIRED: number;
    export const KW_CONTAINS: number;
    export const KW_NAMED: number;
    export const KW_AND: number;
    export const KW_ONLY: number;
    export const KW_OR: number;
    export const KW_OBEYS: number;
    export const KW_TRUE: number;
    export const KW_FALSE: number;
    export const KW_INCLUDE: number;
    export const KW_EXCLUDE: number;
    export const KW_CODES: number;
    export const KW_WHERE: number;
    export const KW_VSREFERENCE: number;
    export const KW_SYSTEM: number;
    export const KW_UNITS: number;
    export const KW_EXACTLY: number;
    export const KW_INSERT: number;
    export const EQUAL: number;
    export const STAR: number;
    export const COLON: number;
    export const COMMA: number;
    export const ARROW: number;
    export const STRING: number;
    export const MULTILINE_STRING: number;
    export const NUMBER: number;
    export const UNIT: number;
    export const CODE: number;
    export const CONCEPT_STRING: number;
    export const DATETIME: number;
    export const TIME: number;
    export const CARD: number;
    export const OR_REFERENCE: number;
    export const PIPE_REFERENCE: number;
    export const CANONICAL: number;
    export const CARET_SEQUENCE: number;
    export const REGEX: number;
    export const COMMA_DELIMITED_CODES: number;
    export const PARAMETER_DEF_LIST: number;
    export const COMMA_DELIMITED_SEQUENCES: number;
    export const BLOCK_COMMENT: number;
    export const SEQUENCE: number;
    export const WHITESPACE: number;
    export const LINE_COMMENT: number;
    export const PARAM_RULESET_REFERENCE: number;
    export const RULESET_REFERENCE: number;
    export const RULE_doc: number;
    export const RULE_entity: number;
    export const RULE_alias: number;
    export const RULE_profile: number;
    export const RULE_extension: number;
    export const RULE_sdMetadata: number;
    export const RULE_sdRule: number;
    export const RULE_instance: number;
    export const RULE_instanceMetadata: number;
    export const RULE_instanceRule: number;
    export const RULE_invariant: number;
    export const RULE_invariantMetadata: number;
    export const RULE_valueSet: number;
    export const RULE_vsMetadata: number;
    export const RULE_vsRule: number;
    export const RULE_codeSystem: number;
    export const RULE_csMetadata: number;
    export const RULE_csRule: number;
    export const RULE_ruleSet: number;
    export const RULE_ruleSetRule: number;
    export const RULE_paramRuleSet: number;
    export const RULE_paramRuleSetContent: number;
    export const RULE_mapping: number;
    export const RULE_mappingMetadata: number;
    export const RULE_mappingEntityRule: number;
    export const RULE_parent: number;
    export const RULE_id: number;
    export const RULE_title: number;
    export const RULE_description: number;
    export const RULE_expression: number;
    export const RULE_xpath: number;
    export const RULE_severity: number;
    export const RULE_instanceOf: number;
    export const RULE_usage: number;
    export const RULE_mixins: number;
    export const RULE_source: number;
    export const RULE_target: number;
    export const RULE_cardRule: number;
    export const RULE_flagRule: number;
    export const RULE_valueSetRule: number;
    export const RULE_fixedValueRule: number;
    export const RULE_containsRule: number;
    export const RULE_onlyRule: number;
    export const RULE_obeysRule: number;
    export const RULE_caretValueRule: number;
    export const RULE_mappingRule: number;
    export const RULE_insertRule: number;
    export const RULE_vsComponent: number;
    export const RULE_vsConceptComponent: number;
    export const RULE_vsFilterComponent: number;
    export const RULE_vsComponentFrom: number;
    export const RULE_vsFromSystem: number;
    export const RULE_vsFromValueset: number;
    export const RULE_vsFilterList: number;
    export const RULE_vsFilterDefinition: number;
    export const RULE_vsFilterOperator: number;
    export const RULE_vsFilterValue: number;
    export const RULE_path: number;
    export const RULE_paths: number;
    export const RULE_caretPath: number;
    export const RULE_flag: number;
    export const RULE_strength: number;
    export const RULE_value: number;
    export const RULE_item: number;
    export const RULE_code: number;
    export const RULE_concept: number;
    export const RULE_quantity: number;
    export const RULE_ratio: number;
    export const RULE_reference: number;
    export const RULE_canonical: number;
    export const RULE_ratioPart: number;
    export const RULE_bool: number;
    export const RULE_targetType: number;
    export { DocContext };
    export { EntityContext };
    export { AliasContext };
    export { ProfileContext };
    export { ExtensionContext };
    export { SdMetadataContext };
    export { SdRuleContext };
    export { InstanceContext };
    export { InstanceMetadataContext };
    export { InstanceRuleContext };
    export { InvariantContext };
    export { InvariantMetadataContext };
    export { ValueSetContext };
    export { VsMetadataContext };
    export { VsRuleContext };
    export { CodeSystemContext };
    export { CsMetadataContext };
    export { CsRuleContext };
    export { RuleSetContext };
    export { RuleSetRuleContext };
    export { ParamRuleSetContext };
    export { ParamRuleSetContentContext };
    export { MappingContext };
    export { MappingMetadataContext };
    export { MappingEntityRuleContext };
    export { ParentContext };
    export { IdContext };
    export { TitleContext };
    export { DescriptionContext };
    export { ExpressionContext };
    export { XpathContext };
    export { SeverityContext };
    export { InstanceOfContext };
    export { UsageContext };
    export { MixinsContext };
    export { SourceContext };
    export { TargetContext };
    export { CardRuleContext };
    export { FlagRuleContext };
    export { ValueSetRuleContext };
    export { FixedValueRuleContext };
    export { ContainsRuleContext };
    export { OnlyRuleContext };
    export { ObeysRuleContext };
    export { CaretValueRuleContext };
    export { MappingRuleContext };
    export { InsertRuleContext };
    export { VsComponentContext };
    export { VsConceptComponentContext };
    export { VsFilterComponentContext };
    export { VsComponentFromContext };
    export { VsFromSystemContext };
    export { VsFromValuesetContext };
    export { VsFilterListContext };
    export { VsFilterDefinitionContext };
    export { VsFilterOperatorContext };
    export { VsFilterValueContext };
    export { PathContext };
    export { PathsContext };
    export { CaretPathContext };
    export { FlagContext };
    export { StrengthContext };
    export { ValueContext };
    export { ItemContext };
    export { CodeContext };
    export { ConceptContext };
    export { QuantityContext };
    export { RatioContext };
    export { ReferenceContext };
    export { CanonicalContext };
    export { RatioPartContext };
    export { BoolContext };
    export { TargetTypeContext };
}
declare function DocContext(parser: any, parent: any, invokingState: any): any;
declare class DocContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    EOF(): any;
    entity(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function EntityContext(parser: any, parent: any, invokingState: any): any;
declare class EntityContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    alias(): any;
    profile(): any;
    extension(): any;
    invariant(): any;
    instance(): any;
    valueSet(): any;
    codeSystem(): any;
    ruleSet(): any;
    paramRuleSet(): any;
    mapping(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function AliasContext(parser: any, parent: any, invokingState: any): any;
declare class AliasContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_ALIAS(): any;
    SEQUENCE(i: any): any;
    EQUAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ProfileContext(parser: any, parent: any, invokingState: any): any;
declare class ProfileContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_PROFILE(): any;
    SEQUENCE(): any;
    sdMetadata(i: any): any;
    sdRule(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ExtensionContext(parser: any, parent: any, invokingState: any): any;
declare class ExtensionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_EXTENSION(): any;
    SEQUENCE(): any;
    sdMetadata(i: any): any;
    sdRule(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SdMetadataContext(parser: any, parent: any, invokingState: any): any;
declare class SdMetadataContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    parent(): any;
    id(): any;
    title(): any;
    description(): any;
    mixins(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SdRuleContext(parser: any, parent: any, invokingState: any): any;
declare class SdRuleContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    cardRule(): any;
    flagRule(): any;
    valueSetRule(): any;
    fixedValueRule(): any;
    containsRule(): any;
    onlyRule(): any;
    obeysRule(): any;
    caretValueRule(): any;
    insertRule(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function InstanceContext(parser: any, parent: any, invokingState: any): any;
declare class InstanceContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_INSTANCE(): any;
    SEQUENCE(): any;
    instanceMetadata(i: any): any;
    instanceRule(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function InstanceMetadataContext(parser: any, parent: any, invokingState: any): any;
declare class InstanceMetadataContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    instanceOf(): any;
    title(): any;
    description(): any;
    usage(): any;
    mixins(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function InstanceRuleContext(parser: any, parent: any, invokingState: any): any;
declare class InstanceRuleContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    fixedValueRule(): any;
    insertRule(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function InvariantContext(parser: any, parent: any, invokingState: any): any;
declare class InvariantContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_INVARIANT(): any;
    SEQUENCE(): any;
    invariantMetadata(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function InvariantMetadataContext(parser: any, parent: any, invokingState: any): any;
declare class InvariantMetadataContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    description(): any;
    expression(): any;
    xpath(): any;
    severity(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ValueSetContext(parser: any, parent: any, invokingState: any): any;
declare class ValueSetContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_VALUESET(): any;
    SEQUENCE(): any;
    vsMetadata(i: any): any;
    vsRule(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function VsMetadataContext(parser: any, parent: any, invokingState: any): any;
declare class VsMetadataContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    id(): any;
    title(): any;
    description(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function VsRuleContext(parser: any, parent: any, invokingState: any): any;
declare class VsRuleContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    vsComponent(): any;
    caretValueRule(): any;
    insertRule(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CodeSystemContext(parser: any, parent: any, invokingState: any): any;
declare class CodeSystemContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_CODESYSTEM(): any;
    SEQUENCE(): any;
    csMetadata(i: any): any;
    csRule(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CsMetadataContext(parser: any, parent: any, invokingState: any): any;
declare class CsMetadataContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    id(): any;
    title(): any;
    description(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CsRuleContext(parser: any, parent: any, invokingState: any): any;
declare class CsRuleContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    concept(): any;
    caretValueRule(): any;
    insertRule(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function RuleSetContext(parser: any, parent: any, invokingState: any): any;
declare class RuleSetContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_RULESET(): any;
    RULESET_REFERENCE(): any;
    ruleSetRule(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function RuleSetRuleContext(parser: any, parent: any, invokingState: any): any;
declare class RuleSetRuleContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    sdRule(): any;
    concept(): any;
    vsComponent(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ParamRuleSetContext(parser: any, parent: any, invokingState: any): any;
declare class ParamRuleSetContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_RULESET(): any;
    PARAM_RULESET_REFERENCE(): any;
    paramRuleSetContent(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ParamRuleSetContentContext(parser: any, parent: any, invokingState: any): any;
declare class ParamRuleSetContentContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    STAR(): any;
    KW_PROFILE(i: any): any;
    KW_ALIAS(i: any): any;
    KW_EXTENSION(i: any): any;
    KW_INSTANCE(i: any): any;
    KW_INVARIANT(i: any): any;
    KW_VALUESET(i: any): any;
    KW_CODESYSTEM(i: any): any;
    KW_RULESET(i: any): any;
    KW_MAPPING(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function MappingContext(parser: any, parent: any, invokingState: any): any;
declare class MappingContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_MAPPING(): any;
    SEQUENCE(): any;
    mappingMetadata(i: any): any;
    mappingEntityRule(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function MappingMetadataContext(parser: any, parent: any, invokingState: any): any;
declare class MappingMetadataContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    id(): any;
    source(): any;
    target(): any;
    description(): any;
    title(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function MappingEntityRuleContext(parser: any, parent: any, invokingState: any): any;
declare class MappingEntityRuleContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    mappingRule(): any;
    insertRule(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ParentContext(parser: any, parent: any, invokingState: any): any;
declare class ParentContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_PARENT(): any;
    SEQUENCE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function IdContext(parser: any, parent: any, invokingState: any): any;
declare class IdContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_ID(): any;
    SEQUENCE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TitleContext(parser: any, parent: any, invokingState: any): any;
declare class TitleContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_TITLE(): any;
    STRING(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function DescriptionContext(parser: any, parent: any, invokingState: any): any;
declare class DescriptionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_DESCRIPTION(): any;
    STRING(): any;
    MULTILINE_STRING(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ExpressionContext(parser: any, parent: any, invokingState: any): any;
declare class ExpressionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_EXPRESSION(): any;
    STRING(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function XpathContext(parser: any, parent: any, invokingState: any): any;
declare class XpathContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_XPATH(): any;
    STRING(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SeverityContext(parser: any, parent: any, invokingState: any): any;
declare class SeverityContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_SEVERITY(): any;
    CODE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function InstanceOfContext(parser: any, parent: any, invokingState: any): any;
declare class InstanceOfContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_INSTANCEOF(): any;
    SEQUENCE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function UsageContext(parser: any, parent: any, invokingState: any): any;
declare class UsageContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_USAGE(): any;
    CODE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function MixinsContext(parser: any, parent: any, invokingState: any): any;
declare class MixinsContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_MIXINS(): any;
    SEQUENCE(i: any): any;
    COMMA_DELIMITED_SEQUENCES(): any;
    KW_AND(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function SourceContext(parser: any, parent: any, invokingState: any): any;
declare class SourceContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_SOURCE(): any;
    SEQUENCE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TargetContext(parser: any, parent: any, invokingState: any): any;
declare class TargetContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_TARGET(): any;
    STRING(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CardRuleContext(parser: any, parent: any, invokingState: any): any;
declare class CardRuleContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    STAR(): any;
    path(): any;
    CARD(): any;
    flag(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function FlagRuleContext(parser: any, parent: any, invokingState: any): any;
declare class FlagRuleContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    STAR(): any;
    path(i: any): any;
    paths(): any;
    flag(i: any): any;
    KW_AND(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ValueSetRuleContext(parser: any, parent: any, invokingState: any): any;
declare class ValueSetRuleContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    STAR(): any;
    path(): any;
    KW_FROM(): any;
    SEQUENCE(): any;
    KW_UNITS(): any;
    strength(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function FixedValueRuleContext(parser: any, parent: any, invokingState: any): any;
declare class FixedValueRuleContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    STAR(): any;
    path(): any;
    EQUAL(): any;
    value(): any;
    KW_UNITS(): any;
    KW_EXACTLY(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ContainsRuleContext(parser: any, parent: any, invokingState: any): any;
declare class ContainsRuleContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    STAR(): any;
    path(): any;
    KW_CONTAINS(): any;
    item(i: any): any;
    KW_AND(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function OnlyRuleContext(parser: any, parent: any, invokingState: any): any;
declare class OnlyRuleContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    STAR(): any;
    path(): any;
    KW_ONLY(): any;
    targetType(i: any): any;
    KW_OR(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ObeysRuleContext(parser: any, parent: any, invokingState: any): any;
declare class ObeysRuleContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    STAR(): any;
    KW_OBEYS(): any;
    SEQUENCE(i: any): any;
    path(): any;
    KW_AND(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CaretValueRuleContext(parser: any, parent: any, invokingState: any): any;
declare class CaretValueRuleContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    STAR(): any;
    caretPath(): any;
    EQUAL(): any;
    value(): any;
    path(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function MappingRuleContext(parser: any, parent: any, invokingState: any): any;
declare class MappingRuleContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    STAR(): any;
    ARROW(): any;
    STRING(i: any): any;
    path(): any;
    CODE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function InsertRuleContext(parser: any, parent: any, invokingState: any): any;
declare class InsertRuleContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    STAR(): any;
    KW_INSERT(): any;
    RULESET_REFERENCE(): any;
    PARAM_RULESET_REFERENCE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function VsComponentContext(parser: any, parent: any, invokingState: any): any;
declare class VsComponentContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    STAR(): any;
    vsConceptComponent(): any;
    vsFilterComponent(): any;
    KW_INCLUDE(): any;
    KW_EXCLUDE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function VsConceptComponentContext(parser: any, parent: any, invokingState: any): any;
declare class VsConceptComponentContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    code(i: any): any;
    vsComponentFrom(): any;
    KW_AND(i: any): any;
    COMMA_DELIMITED_CODES(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function VsFilterComponentContext(parser: any, parent: any, invokingState: any): any;
declare class VsFilterComponentContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_CODES(): any;
    vsComponentFrom(): any;
    KW_WHERE(): any;
    vsFilterList(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function VsComponentFromContext(parser: any, parent: any, invokingState: any): any;
declare class VsComponentFromContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_FROM(): any;
    vsFromSystem(): any;
    vsFromValueset(): any;
    KW_AND(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function VsFromSystemContext(parser: any, parent: any, invokingState: any): any;
declare class VsFromSystemContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_SYSTEM(): any;
    SEQUENCE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function VsFromValuesetContext(parser: any, parent: any, invokingState: any): any;
declare class VsFromValuesetContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_VSREFERENCE(): any;
    SEQUENCE(i: any): any;
    COMMA_DELIMITED_SEQUENCES(): any;
    KW_AND(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function VsFilterListContext(parser: any, parent: any, invokingState: any): any;
declare class VsFilterListContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    vsFilterDefinition(i: any): any;
    KW_AND(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function VsFilterDefinitionContext(parser: any, parent: any, invokingState: any): any;
declare class VsFilterDefinitionContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    SEQUENCE(): any;
    vsFilterOperator(): any;
    vsFilterValue(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function VsFilterOperatorContext(parser: any, parent: any, invokingState: any): any;
declare class VsFilterOperatorContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    EQUAL(): any;
    SEQUENCE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function VsFilterValueContext(parser: any, parent: any, invokingState: any): any;
declare class VsFilterValueContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    code(): any;
    KW_TRUE(): any;
    KW_FALSE(): any;
    REGEX(): any;
    STRING(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PathContext(parser: any, parent: any, invokingState: any): any;
declare class PathContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    SEQUENCE(): any;
    KW_SYSTEM(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function PathsContext(parser: any, parent: any, invokingState: any): any;
declare class PathsContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    COMMA_DELIMITED_SEQUENCES(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CaretPathContext(parser: any, parent: any, invokingState: any): any;
declare class CaretPathContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    CARET_SEQUENCE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function FlagContext(parser: any, parent: any, invokingState: any): any;
declare class FlagContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_MOD(): any;
    KW_MS(): any;
    KW_SU(): any;
    KW_TU(): any;
    KW_NORMATIVE(): any;
    KW_DRAFT(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function StrengthContext(parser: any, parent: any, invokingState: any): any;
declare class StrengthContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_EXAMPLE(): any;
    KW_PREFERRED(): any;
    KW_EXTENSIBLE(): any;
    KW_REQUIRED(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ValueContext(parser: any, parent: any, invokingState: any): any;
declare class ValueContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    SEQUENCE(): any;
    STRING(): any;
    MULTILINE_STRING(): any;
    NUMBER(): any;
    DATETIME(): any;
    TIME(): any;
    reference(): any;
    canonical(): any;
    code(): any;
    quantity(): any;
    ratio(): any;
    bool(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ItemContext(parser: any, parent: any, invokingState: any): any;
declare class ItemContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    SEQUENCE(i: any): any;
    CARD(): any;
    KW_NAMED(): any;
    flag(i: any): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CodeContext(parser: any, parent: any, invokingState: any): any;
declare class CodeContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    CODE(): any;
    STRING(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ConceptContext(parser: any, parent: any, invokingState: any): any;
declare class ConceptContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    STAR(): any;
    code(): any;
    STRING(): any;
    MULTILINE_STRING(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function QuantityContext(parser: any, parent: any, invokingState: any): any;
declare class QuantityContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    NUMBER(): any;
    UNIT(): any;
    STRING(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function RatioContext(parser: any, parent: any, invokingState: any): any;
declare class RatioContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    ratioPart(i: any): any;
    COLON(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function ReferenceContext(parser: any, parent: any, invokingState: any): any;
declare class ReferenceContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    OR_REFERENCE(): any;
    PIPE_REFERENCE(): any;
    STRING(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function CanonicalContext(parser: any, parent: any, invokingState: any): any;
declare class CanonicalContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    CANONICAL(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function RatioPartContext(parser: any, parent: any, invokingState: any): any;
declare class RatioPartContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    NUMBER(): any;
    quantity(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function BoolContext(parser: any, parent: any, invokingState: any): any;
declare class BoolContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    KW_TRUE(): any;
    KW_FALSE(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
declare function TargetTypeContext(parser: any, parent: any, invokingState: any): any;
declare class TargetTypeContext {
    constructor(parser: any, parent: any, invokingState: any);
    parser: any;
    ruleIndex: number;
    SEQUENCE(): any;
    reference(): any;
    enterRule(listener: any): void;
    exitRule(listener: any): void;
    accept(visitor: any): any;
}
export { FSHParser }