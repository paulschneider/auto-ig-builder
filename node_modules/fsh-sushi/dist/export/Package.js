"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fhirtypes_1 = require("../fhirtypes");
const Fishable_1 = require("../utils/Fishable");
class Package {
    constructor(config) {
        this.config = config;
        this.profiles = [];
        this.extensions = [];
        this.instances = [];
        this.valueSets = [];
        this.codeSystems = [];
    }
    fish(item, ...types) {
        // No types passed in means to search ALL supported types
        if (types.length === 0) {
            types = [Fishable_1.Type.Profile, Fishable_1.Type.Extension, Fishable_1.Type.ValueSet, Fishable_1.Type.CodeSystem, Fishable_1.Type.Instance];
        }
        for (const type of types) {
            let def;
            switch (type) {
                case Fishable_1.Type.Profile:
                    def = this.profiles.find(p => p.id === item || p.name === item || p.url === item);
                    break;
                case Fishable_1.Type.Extension:
                    def = this.extensions.find(e => e.id === item || e.name === item || e.url === item);
                    break;
                case Fishable_1.Type.ValueSet:
                    def = this.valueSets.find(vs => vs.id === item || vs.name === item || vs.url === item);
                    break;
                case Fishable_1.Type.CodeSystem:
                    def = this.codeSystems.find(cs => cs.id === item || cs.name === item || cs.url === item);
                    break;
                case Fishable_1.Type.Instance:
                    def = this.instances.find(i => i.id === item || i._instanceMeta.name === item);
                    break;
                case Fishable_1.Type.Resource: // Package doesn't currently support resources
                case Fishable_1.Type.Type: // Package doesn't currently support types
                default:
                    break;
            }
            if (def) {
                return def;
            }
        }
    }
    fishForFHIR(item, ...types) {
        var _a;
        return (_a = this.fish(item, ...types)) === null || _a === void 0 ? void 0 : _a.toJSON();
    }
    fishForMetadata(item, ...types) {
        const result = this.fish(item, ...types);
        if (result) {
            const metadata = {
                id: result.id,
                name: result instanceof fhirtypes_1.InstanceDefinition ? result._instanceMeta.name : result.name,
                instanceUsage: result instanceof fhirtypes_1.InstanceDefinition ? result._instanceMeta.usage : undefined,
                url: result.url
            };
            if (result instanceof fhirtypes_1.StructureDefinition) {
                metadata.sdType = result.type;
                metadata.parent = result.baseDefinition;
            }
            return metadata;
        }
    }
}
exports.Package = Package;
//# sourceMappingURL=Package.js.map