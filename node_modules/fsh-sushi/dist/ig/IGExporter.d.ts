import { Package } from '../export';
import { FHIRDefinitions } from '../fhirdefs';
/**
 * The IG Exporter exports the FSH artifacts into a file structure supported by the IG Publisher.
 * This allows a FSH Tank to be built as a FHIR IG.  Currently, template-based IG publishing is
 * still new, so this functionality is subject to change.
 *
 * @see {@link https://build.fhir.org/ig/FHIR/ig-guidance/index.html}
 */
export declare class IGExporter {
    private readonly pkg;
    private readonly fhirDefs;
    private readonly igDataPath;
    private readonly isIgPubContext;
    private ig;
    private readonly configPath;
    private readonly outputLog;
    private readonly config;
    private readonly configName;
    private shouldCopyFiles;
    constructor(pkg: Package, fhirDefs: FHIRDefinitions, igDataPath: string, isIgPubContext?: boolean);
    getOutputLogDetails(file: string): outputLogDetails;
    /**
     * Export the IG structure to the location specified by the outPath argument
     *
     * @see {@link https://build.fhir.org/ig/FHIR/ig-guidance/using-templates.html#directory-structure}
     * @param outPath {string} - the path to export the IG file structure to
     */
    export(outPath: string): void;
    /**
     * Initializes the ImplementationGuide JSON w/ data from the configuration YAML
     *
     * @see {@link https://confluence.hl7.org/pages/viewpage.action?pageId=35718629#NPMPackageSpecification-PackageManifestpropertiesforIGs}
     */
    initIG(): void;
    /**
     * Fixes a dependsOn entry by specifying its uri (if not yet specified) and generating an id (if
     * not yet specified). Will also ensure that required properties (uri/version) are available.
     * If it cannot ensure a valid dependsOn entry, it will return undefined.
     * @param dependency - the dependency to fix
     * @param igs - the IGs to search when finding the dependency URI
     * @returns the fixed dependency or null if it can't be fixed
     */
    private fixDependsOn;
    /**
     * Add the index.md file. Creates an index.md based on the "indexPageContent" in sushi-config.yaml.
     * If the user specified an index file in the ig-data folder, and no "indexPageContent" in sushi-config.yaml is specified,
     * the file from ig-data is used instead. The provided file may be in one of two locations:
     * ig-data/input/pagecontent or ig-data/input/pages
     *
     * @see {@link https://build.fhir.org/ig/FHIR/ig-guidance/using-templates.html#root.input}
     * @param igPath - the path where the IG is exported to
     */
    addIndex(igPath: string): void;
    /**
     * Adds additional pages beyond index.md that are defined by the user.
     * Only add formats that are supported by the IG template
     * Intro and notes file contents are injected into relevant pages and should not be treated as their own page
     * Three directories are checked for additional page content:
     * pagecontent, pages, and resource-docs
     *
     * @see {@link https://build.fhir.org/ig/FHIR/ig-guidance/using-templates.html#root.input}
     * @param {string} igPath - the path where the IG is exported to
     */
    private addOtherPageContent;
    /**
     * Adds additional pages to the IG based on user configuration.
     * Only pages present in the configuration are added, regardless of available files.
     * All files in the page content folders will be copied,
     * regardless of configuration.
     *
     * @see {@link https://build.fhir.org/ig/FHIR/ig-guidance/using-templates.html#directory-structure}
     * @see {@link https://build.fhir.org/ig/FHIR/ig-guidance/using-templates.html#root.input}
     * @param {string} igPath - the path where the IG is exported to
     */
    addConfiguredPageContent(igPath: string): void;
    /**
     * Adds pages to the implementation guide's list of pages.
     * The page configuration is traversed recursively to maintain the configured structure.
     *
     * @see {@link https://build.fhir.org/ig/FHIR/ig-guidance/using-templates.html#root.input}
     * @param {ImplementationGuideDefinitionPage} page - the current page being added to a list of output pages
     * @param {ImplementationGuideDefinitionPage[]} target - the list of output pages that will receive the current page
     */
    private addConfiguredPage;
    /**
     * Sorts and renames pages based on numeric prefixes.
     * Numeric prefixes are used for applying a sort order, but should be removed
     * from the page's name and title unless doing so would cause a name collision.
     *
     * @param {string[]} pages - list of file names with extensions
     * @returns {PageMetadata []} - sorted list of file information objects
     */
    private organizePageContent;
    /**
     * Compares two file names, each of which may be prefixed with a number.
     * If neither file has a prefix, compares the file names alphabetically.
     * If one file has a prefix, that file is before the other.
     * If both have a prefix, compares the prefixes numerically.
     * If the prefixes are equal, resolves the tie by comparing the file names alphabetically.
     *
     * @param {PageMetadata} pageA - metadata for first file
     * @param {PageMetadata} pageB - metadata for second file
     * @returns {number} - positive when file b comes first, negative when file a comes first, zero when the file names are equal.
     */
    private compareIgFilenames;
    /**
     * Adds any user provided images that can be referenced directly in other pages
     *
     * @param igPath {string} - the path where the IG is exported to
     */
    private addImages;
    /**
     * Adds any user provided includes files
     * A user provided menu.xml may be in this folder, but do not handle it here. It is handled separately in addMenuXML.
     *
     * @param {string} igPath - the path where the IG is exported to
     */
    addIncludeContents(igPath: string): void;
    /**
     * Adds menu.xml
     * A user can define a menu in sushi-config.yaml or provide one in ig-data/input/includes.
     * If neither is provided, the static one SUSHI provides will be used.
     *
     * @param {string} igPath - the path where the IG is exported to
     */
    addMenuXML(igPath: string): void;
    /**
     * Build individual menu item for menu.xml file. An item could contain a submenu
     *
     * @param {ConfigurationMenuItem} item - the menu item to be rendered
     * @param {number} spaces - the base number of spaces to indent
     * @returns {string} - the piece of XML relating to the given menu item
     */
    private buildMenuItem;
    /**
     * Build a submenu for an item for menu.xml.
     *
     * @param item - the menu item with submenu to be rendered
     * @param spaces - the base number of spaces to indent
     * @returns {string} - the piece of XML relating to the submenu
     */
    private buildSubMenu;
    /**
     * Adds user provided ignoreWarnings.txt file if it exists; otherwise the static one SUSHI provides will be used.
     *
     * @param {string} igPath - the path where the IG is exported to
     */
    addIgnoreWarningsFile(igPath: string): void;
    /**
     * Add each of the resources from the package to the ImplementationGuide JSON file.
     * Configuration may specify resources to omit.
     *
     * This function has similar operation to addPredefinedResources, and both should be
     * analyzed when making changes to either.
     */
    private addResources;
    /**
     * Adds any user provided resource files
     * This includes definitions in:
     * capabilities, extensions, models, operations, profiles, resources, vocabulary, examples
     * Based on: https://build.fhir.org/ig/FHIR/ig-guidance/using-templates.html#root.input
     *
     * This function has similar operation to addResources, and both should be
     * analyzed when making changes to either.
     *
     * @param {string} igPath - the path where the IG is exported to
     */
    private addPredefinedResources;
    /**
     * Adds resources that are present only in the configuration.
     * If a configured resource is already in the implementation guide,
     * there is no need to add it again.
     */
    private addConfiguredResources;
    /**
     * Adds or updates a group in the implementation guide.
     *
     * @param {string} id - unique identifier for group
     * @param {string} name - name of the group
     * @param {string} description - optional description of the group
     */
    private addGroup;
    /**
     * Adds groups listed in the configuration to the implementation guide.
     * Updates the groupingId on resources listed as members of a group.
     * Shows errors if a listed resource does not exist, or if there are conflicting
     * configured values for groupingId.
     * Shows a warning if a groupingId is given in resource configuration and
     * that resource is listed in the group with that groupingId.
     */
    private addConfiguredGroups;
    private getMetaExtensionDescription;
    private getMetaExtensionName;
    /**
     * Writes the in-memory ImplementationGuide JSON to the IG output folder.
     *
     * @param igPath {string} - the path where the IG is exported to
     */
    addImplementationGuide(igPath: string): void;
    /**
     * Creates an ig.ini file based on the "template" in sushi-config.yaml and exports it to the IG folder.
     * If the user specified an igi.ini file in the ig-data folder, and no "template" in sushi-config.yaml is specified,
     * the file from ig-data is used instead.
     *
     * @param igPath {string} - the path where the IG is exported to
     */
    addIgIni(igPath: string): void;
    /**
     * Generates the contents of an ig.ini file using the information in the configuration.
     *
     * @returns {string} contents of ig.ini file
     */
    generateIgIniString(includeWarning?: boolean): string;
    /**
     * Generates an ig.ini file using the information in the configuration.
     *
     * @param igPath {string} - the path where the IG is exported to
     */
    generateIgIni(igPath: string): void;
    /**
     * Process an existing ig.ini. The file will always be copied as-is.
     * When one of the required properties is missing, an error is logged but the file is copied as-is.
     *
     * @param igPath {string} - the path where the IG is exported to
     * @param inputIniPath {string} - the path to the input ig.ini file
     */
    processIgIni(igPath: string, inputIniPath: string): void;
    /**
     * Adds the package-list.json file to the IG. Generated based on the Configuration history
     * field, or the package-list.json found at ig-data/package-list.json.
     *
     * @param igPath {string} - the path where the IG is exported to
     */
    addPackageList(igPath: string): void;
    /**
     * Creates and writes the SUSHI-GENERATED-FILES.md file. This file is intended to help users understand what
     * files are created by SUSHI and how they are created.
     *
     * @param igPath {string} - the path where the IG is exported to
     */
    private addOutputLog;
    /**
     * Recursively copies one path to another, logging the output of each file so it can be reported in the
     * SUSHI-GENERATED-FILES.md file.
     *
     * @param inputPath {string} - the input path to copy
     * @param outputPath {string} - the output path to copy to
     * @param filter {(string) => boolean} - a filter indicating the files to copy
     */
    private copyAsIs;
    /**
     * Recursively copies input to an output location, adding a warning to the top of the each supported
     * file indicating that it is a generated file and should not be edited directly. Only .md and .xml
     * files will have the warning added.  All other files are copied as-is. In addition, this function
     * will log the output file so it can be reported in the SUSHI-GENERATED-FILES.md file.
     *
     * @param inputPath {string} - the input path to copy
     * @param outputPath {string} - the output path to copy to
     */
    private copyWithWarningText;
    /**
     * Updates the output log with the files that were copied from input to output. For files that come
     * directly from SUSHI (e.g., _updatePublisher.sh), don't log the input path.  Just mark it as a
     * generated file.
     *
     * @param outputPath - the output path to report on in the log
     * @param inputPath - the input path that was copied to the output
     * @param filter {(string) => boolean} - a filter indicating the files to copy
     */
    private updateOutputLogForCopiedPath;
    /**
     * Updates the output log for a specific output file, indicating the file (or files) that were
     * either copied or used to generate the file. If a log already exists for the output file,
     * it will update the log.
     *
     * @param output {string} - the output file to log
     * @param inputs {List<string>} - the list of inputs used to create the file
     * @param action {'copied'|'generated'} - how SUSHI created the file
     */
    private updateOutputLog;
}
declare type OutputLogAction = 'copied' | 'generated';
declare type outputLogDetails = {
    action: OutputLogAction;
    inputs: string[];
};
export {};
